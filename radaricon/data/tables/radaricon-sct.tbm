#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[

RadarIcon = {}

function RadarIcon:Init()

	self.Enabled = false
	
	self.ShipIconClasses = {}
	self.WeaponIconClasses = {}
	
	self.ShipIcons = {}
	self.WeaponIcons = {}
	
	self.Teams = {}
	
	self.DistanceMult = 1
	
	--Uncommenting this reduces the distance-based fade effect in a nebula
	--Required SCP change is currently a PR (#2997) and may be included in one of the next nightlies
	--if mn.isNebula() then
	--	self.DistanceMult = 0.5
	--end
	
	if cf.fileExists("radaricon.cfg","data/config",true) then
		self.Config = axemParse:ReadJSON("radaricon.cfg")
	else
		ba.error("RadarIcon: Config file missing! Cannot proceed!\n")
		return
	end
	
	self.Scalings = self.Config.Scale
	self.CenterX = gr.getScreenWidth() / 2
	self.CenterY = gr.getScreenHeight() / 2
	
	for ship,textureName in pairs(self.Config.Ships) do
	
		local scale = self.CenterY / 540 --Built for 1080p
		
		if self.Scalings[tb.ShipClasses[ship].Type.Name] ~= nil then
			local locscale = self.Scalings[tb.ShipClasses[ship].Type.Name]
			
			scale = scale * locscale
		end
		
		if scale > 1 then
			scale = 1
		end
	
		local loadedTex = gr.loadTexture(textureName)
		local x = loadedTex:getWidth() * scale
		local y = loadedTex:getHeight() * scale
		local size = 32
		
		while size < x or size < y do
			size = size * 2
		end
		
		local renderTex = gr.createTexture(size, size, TEXTURE_STATIC)
		gr.setTarget(renderTex)
		gr.drawImage(loadedTex, (size - x ) / 2, (size - y) / 2, (size + x) / 2, (size + y) / 2)
		gr.setTarget()
		loadedTex:unload()
		
		self.ShipIconClasses[ship] = renderTex
	end

	for weapon,textureName in pairs(self.Config.Weapons) do
		local loadedTex = gr.loadTexture(textureName)
		
		self.WeaponIconClasses[weapon] = loadedTex
	end

	self.Alpha = self.Config.Alpha

	if self.Config.AlwaysOn then
	
		self.Teams["Friendly"] = true
		self.Teams["Hostile"] = true
		self.Teams["Neutral"] = true
		self.Teams["Traitor"] = true
		self.Teams["Unknown"] = true
		self.Enabled = true
		RadarIcon:LoadShips()
		
	end

end

function RadarIcon:MaybeAddShip(ship)
	if ship:getBreedName() ~= "Ship" or not self.Teams[ship.Team.Name] then
		return
	end

	local texture = self.ShipIconClasses[ship.Class.Name]
	if texture ~= nil then
		self.ShipIcons[ship] = texture
	end
end

function RadarIcon:MaybeDeleteShip(ship)
	if not ship.Class then
		return
	end

	if self.ShipIcons[ship] ~= nil then
		self.ShipIcons[ship] = nil
	end
end

function RadarIcon:MaybeAddWeapon(weapon)
	if not self.Teams[weapon.Team.Name] then
		return
	end

	local texture = self.WeaponIconClasses[weapon.Class.Name]
	if texture ~= nil then
		self.WeaponIcons[weapon] = texture
	end
end

function RadarIcon:MaybeDeleteWeapon(weapon)
	if self.WeaponIcons[weapon] ~= nil then
		self.WeaponIcons[weapon] = nil
	end
end

-----------------------------

function RadarIcon:EvaluateAlpha(position, x, y, typename) 
	--EatThePath: Stack of icons
	--EatThePath: Default for species
	--bogus: default max opacity
	local alpha = 255
	local dist = math.abs((position - hv.Player.Position):getDotProduct(hv.Player:getfvec(true)))
	
	local multiplier = self.DistanceMult
	if self.Alpha.ClassMultiplier[typename] ~= nil then
		multiplier = multiplier * self.Alpha.ClassMultiplier[typename]
	end
	
	local near = self.Alpha.Near * multiplier
	local far = self.Alpha.Far * multiplier
	
	if dist < near then
		alpha = 0
	elseif dist < far then
		alpha = alpha * (dist - near) / (far - near)
	end
	
	x = x - self.CenterX
	y = y - self.CenterY
	
	local crosshairdist = math.sqrt(x * x + y * y) / self.CenterY

	if crosshairdist < self.Alpha.ReticleNear then
		alpha = 0
	elseif crosshairdist < self.Alpha.ReticleFar then
		alpha = alpha * (crosshairdist - self.Alpha.ReticleNear) / (self.Alpha.ReticleFar - self.Alpha.ReticleNear)
	end
	
	return alpha
end

function RadarIcon:DrawIcon(obj, texture) 
	if hv.Player.Target == obj then
		return
	end

	local pos = obj.Position
	local typename = ""
		
	if obj:getBreedName() == "Ship" then
		pos = obj:getCenterPosition()
		typename = obj.Class.Type.Name
	end
	local x, y = pos:getScreenCoords()
		
	-- getScreenCoords returns one false insead of two coords if offscreen
	if x ~= false then
		local alpha = RadarIcon:EvaluateAlpha(pos, x, y, typename)
		local r, g, b = obj.Team:getColor()
		gr.setColor(r, g, b, alpha)
		
		local wHalf = texture:getWidth() / 2
		local hHalf = texture:getHeight() / 2
		gr.drawMonochromeImage(texture, x - wHalf, y - hHalf, x + wHalf, y + hHalf, alpha)
			
	end
end

function RadarIcon:Draw() 
	for ship, texture in pairs(self.ShipIcons) do
		-- Only Draw when fully visible on Radar
		-- This is an evil hack since evaluateNumericSEXP seems to have trouble with OPF_POSITIVE SEXPs 
		if mn.evaluateSEXP("( = 2 ( is-ship-visible !" .. ship.Name .. "! ) )") then
			RadarIcon:DrawIcon(ship, texture) 
		end
	end
	
	for weapon, texture in pairs(self.WeaponIcons) do
		RadarIcon:DrawIcon(weapon, texture) 
	end
end

function RadarIcon:Enable(...)
	self.Enabled = true
	
	for k,val in ipairs(arg) do
		self.Teams[val[1]] = true
	end
	
	RadarIcon:LoadShips()
end 

function RadarIcon:LoadShips()
	local number = #mn.Ships
	for i = 1, number, 1 do
		RadarIcon:MaybeAddShip(mn.Ships[i])
	end
	number = #mn.Weapons
	for i = 1, number, 1 do
		RadarIcon:MaybeAddWeapon(mn.Weapons[i])
	end
end

function RadarIcon:Disable()
	RadarIcon.Enabled = false
	RadarIcon.ShipIcons = {}
	RadarIcon.WeaponIcons = {}
	RadarIcon.Teams = {}
end

mn.LuaSEXPs["lua-radaricon-activate"].Action = function(...) RadarIcon:Enable(...) end

mn.LuaSEXPs["lua-radaricon-deactivate"].Action = function() RadarIcon:Disable() end

]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start:
[
	RadarIcon:Init()
]

$On State End:
[
	RadarIcon:Disable()
]

$On Weapon Created:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeAddWeapon(hv.Weapon)
	end
]

$On Weapon Delete:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteWeapon(hv.Weapon)
	end
]

$On Ship Arrive:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeAddShip(hv.Ship)
	end
]

$On Ship Depart:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteShip(hv.Ship)
	end
]

$On Death:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteShip(hv.Self)
	end
]

$On HUD Draw:
[
	if RadarIcon.Enabled and hu.HUDDrawn and not hu.HUDDisabledExceptMessages and (gr.hasViewmode(VM_INTERNAL) or gr.hasViewmode(VM_CHASE)) then
		if mn.getMissionTime() > 1 then
			RadarIcon:Draw()
		end
	end
]

#End