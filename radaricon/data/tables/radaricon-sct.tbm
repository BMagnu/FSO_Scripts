#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[

RadarIcon = {}

function RadarIcon:Init()

	self.Enabled = false
	
	self.ShipIconClasses = {}
	self.WeaponIconClasses = {}
	
	self.ShipIcons = {}
	self.WeaponIcons = {}
	
	self.Teams = {}
	
	if cf.fileExists("radaricon.cfg","data/config",true) then
		self.Config = axemParse:ReadJSON("radaricon.cfg")
	else
		ba.error("RadarIcon: Config file missing! Cannot proceed!\n")
		return
	end
	
	for ship,textureName in pairs(self.Config.Ships) do
		self.ShipIconClasses[ship] = gr.loadTexture(textureName)
	end

	for weapon,textureName in pairs(self.Config.Weapons) do
		self.WeaponIconClasses[weapon] = gr.loadTexture(textureName)
	end

	self.Alpha = self.Config.Alpha
	self.Scalings = self.Config.Scale
	self.CenterX = gr.getScreenWidth() / 2
	self.CenterY = gr.getScreenHeight() / 2

	if self.Config.AlwaysOn then
	
		self.Teams["Friendly"] = true
		self.Teams["Hostile"] = true
		self.Teams["Neutral"] = true
		self.Teams["Traitor"] = true
		self.Teams["Unknown"] = true
		self.Enabled = true
		RadarIcon:LoadShips()
		
	end

end

function RadarIcon:MaybeAddShip(ship)
	if ship:getBreedName() ~= "Ship" or not self.Teams[ship.Team.Name] then
		return
	end

	local texture = self.ShipIconClasses[ship.Class.Name]
	if texture ~= nil then
		self.ShipIcons[ship] = texture
	end
end

function RadarIcon:MaybeDeleteShip(ship)
	if not ship.Class then
		return
	end

	if self.ShipIcons[ship] ~= nil then
		self.ShipIcons[ship] = nil
	end
end

function RadarIcon:MaybeAddWeapon(weapon)
	if not self.Teams[weapon.Team.Name] then
		return
	end

	local texture = self.WeaponIconClasses[weapon.Class.Name]
	if texture ~= nil then
		self.WeaponIcons[weapon] = texture
	end
end

function RadarIcon:MaybeDeleteWeapon(weapon)
	if self.WeaponIcons[weapon] ~= nil then
		self.WeaponIcons[weapon] = nil
	end
end

-----------------------------

function RadarIcon:EvaluateAlpha(ship, x, y) 
	--Asteroth: Idea to make smaller ships switch to icon faster
	--Mito: Shorter fade range in Nebulas
	local alpha = 255
	local dist = math.abs((ship.Position - hv.Player.Position):getDotProduct(hv.Player:getfvec(true)))
	
	if dist < self.Alpha.Near then
		alpha = 0
	elseif dist < self.Alpha.Far then
		alpha = alpha * (dist - self.Alpha.Near) / (self.Alpha.Far - self.Alpha.Near)
	end
	
	x = x - self.CenterX
	y = y - self.CenterY
	
	local crosshairdist = math.sqrt(x * x + y * y) / self.CenterY

	if crosshairdist < self.Alpha.ReticleNear then
		alpha = 0
	elseif crosshairdist < self.Alpha.ReticleFar then
		alpha = alpha * (crosshairdist - self.Alpha.ReticleNear) / (self.Alpha.ReticleFar - self.Alpha.ReticleNear)
	end
	
	return alpha
end

function RadarIcon:DrawIcon(obj, texture) 
	if hv.Player.Target == obj then
		return
	end

	local x, y = obj.Position:getScreenCoords()
		
	-- getScreenCoords returns one false insead of two coords if offscreen
	if x ~= false then
			
		local alpha = RadarIcon:EvaluateAlpha(obj, x, y)
		local r, g, b = obj.Team:getColor()
		gr.setColor(r, g, b, alpha)
		
		local scale = 1
		if obj.Class.Type ~= nil and self.Scalings[obj.Class.Type.Name] ~= nil then
			scale = self.Scalings[obj.Class.Type.Name]
		end
		
		local wHalf = texture:getWidth() / 2 --* scale
		local hHalf = texture:getHeight() / 2 --* scale
		gr.drawMonochromeImage(texture, x - wHalf, y - hHalf, x + wHalf, y + hHalf, alpha)
			
	end
end

function RadarIcon:Draw() 
	for ship, texture in pairs(self.ShipIcons) do
		-- Only Draw when fully visible on Radar
		-- This is an evil hack since evaluateNumericSEXP seems to have trouble with OPF_POSITIVE SEXPs 
		if mn.evaluateSEXP("( = 2 ( is-ship-visible !" .. ship.Name .. "! ) )") then
			RadarIcon:DrawIcon(ship, texture) 
		end
	end
	
	for weapon, texture in pairs(self.WeaponIcons) do
		RadarIcon:DrawIcon(weapon, texture) 
	end
end

function RadarIcon:Enable(...)
	self.Enabled = true
	
	for k,val in ipairs(arg) do
		self.Teams[val[1]] = true
	end
	
	RadarIcon:LoadShips()
end 

function RadarIcon:LoadShips()
	local number = #mn.Ships
	for i = 1, number, 1 do
		RadarIcon:MaybeAddShip(mn.Ships[i])
	end
	number = #mn.Weapons
	for i = 1, number, 1 do
		RadarIcon:MaybeAddWeapon(mn.Weapons[i])
	end
end

function RadarIcon:Disable()
	RadarIcon.Enabled = false
	RadarIcon.ShipIcons = {}
	RadarIcon.WeaponIcons = {}
	RadarIcon.Teams = {}
end

mn.LuaSEXPs["lua-radaricon-activate"].Action = function(...) RadarIcon:Enable(...) end

mn.LuaSEXPs["lua-radaricon-deactivate"].Action = function() RadarIcon:Disable() end

]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start:
[
	RadarIcon:Init()
]

$On State End:
[
	RadarIcon:Disable()
]

$On Weapon Created:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeAddWeapon(hv.Weapon)
	end
]

$On Weapon Delete:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteWeapon(hv.Weapon)
	end
]

$On Ship Arrive:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeAddShip(hv.Ship)
	end
]

$On Ship Depart:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteShip(hv.Ship)
	end
]

$On Death:
[
	if RadarIcon.Enabled then
		RadarIcon:MaybeDeleteShip(hv.Self)
	end
]

$On HUD Draw:
[
	if RadarIcon.Enabled and hu.HUDDrawn and not hu.HUDDisabledExceptMessages and (gr.hasViewmode(VM_INTERNAL) or gr.hasViewmode(VM_CHASE)) then
		if mn.getMissionTime() > 1 then
			RadarIcon:Draw()
		end
	end
]

#End